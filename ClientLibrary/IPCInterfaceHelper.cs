//
// Autogenerated by building FactoryOrchestratorClientLibrary. DO NOT MODIFY, CHANGES WILL BE LOST.
//

using Microsoft.FactoryOrchestrator.Core;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using TaskStatus = Microsoft.FactoryOrchestrator.Core.TaskStatus;

namespace Microsoft.FactoryOrchestrator.Client
{
    public partial class FactoryOrchestratorClient
    {
        public async Task ResetService(bool preserveLogs = false, bool factoryReset = false)
        {
            if (!IsConnected)
            {
                throw new InvalidOperationException("Start connection first!");
            }

            await _IpcClient.InvokeAsync(x => x.ResetService(preserveLogs , factoryReset ));
        }

        public async Task<List<ServiceEvent>> GetServiceEvents()
        {
            if (!IsConnected)
            {
                throw new InvalidOperationException("Start connection first!");
            }

            return await _IpcClient.InvokeAsync(x => x.GetServiceEvents());
        }

        public async Task<List<ServiceEvent>> GetServiceEvents(DateTime timeLastChecked)
        {
            if (!IsConnected)
            {
                throw new InvalidOperationException("Start connection first!");
            }

            return await _IpcClient.InvokeAsync(x => x.GetServiceEvents(timeLastChecked));
        }

        public async Task<List<ServiceEvent>> GetServiceEvents(ulong lastEventIndex)
        {
            if (!IsConnected)
            {
                throw new InvalidOperationException("Start connection first!");
            }

            return await _IpcClient.InvokeAsync(x => x.GetServiceEvents(lastEventIndex));
        }

        public async Task<ServiceEvent> GetLastServiceError()
        {
            if (!IsConnected)
            {
                throw new InvalidOperationException("Start connection first!");
            }

            return await _IpcClient.InvokeAsync(x => x.GetLastServiceError());
        }

        public async Task<string> GetServiceVersionString()
        {
            if (!IsConnected)
            {
                throw new InvalidOperationException("Start connection first!");
            }

            return await _IpcClient.InvokeAsync(x => x.GetServiceVersionString());
        }

        public async Task<bool> SetDefaultTePath(string teExePath)
        {
            if (!IsConnected)
            {
                throw new InvalidOperationException("Start connection first!");
            }

            return await _IpcClient.InvokeAsync(x => x.SetDefaultTePath(teExePath));
        }

        public async Task<bool> SetLogFolder(string logFolder, bool moveExistingLogs)
        {
            if (!IsConnected)
            {
                throw new InvalidOperationException("Start connection first!");
            }

            return await _IpcClient.InvokeAsync(x => x.SetLogFolder(logFolder, moveExistingLogs));
        }

        public async Task<string> GetLogFolder()
        {
            if (!IsConnected)
            {
                throw new InvalidOperationException("Start connection first!");
            }

            return await _IpcClient.InvokeAsync(x => x.GetLogFolder());
        }

        public async Task<List<Tuple<string, string>>> GetIpAddressesAndNicNames()
        {
            if (!IsConnected)
            {
                throw new InvalidOperationException("Start connection first!");
            }

            return await _IpcClient.InvokeAsync(x => x.GetIpAddressesAndNicNames());
        }

        public async Task<List<string>> GetDisabledPages()
        {
            if (!IsConnected)
            {
                throw new InvalidOperationException("Start connection first!");
            }

            return await _IpcClient.InvokeAsync(x => x.GetDisabledPages());
        }

        public async Task<TaskList> CreateTaskListFromDirectory(string path, bool onlyTAEF = false)
        {
            if (!IsConnected)
            {
                throw new InvalidOperationException("Start connection first!");
            }

            return await _IpcClient.InvokeAsync(x => x.CreateTaskListFromDirectory(path, onlyTAEF ));
        }

        public async Task<List<Guid>> LoadTaskListsFromXmlFile(string filename)
        {
            if (!IsConnected)
            {
                throw new InvalidOperationException("Start connection first!");
            }

            return await _IpcClient.InvokeAsync(x => x.LoadTaskListsFromXmlFile(filename));
        }

        public async Task<bool> SaveTaskListToXmlFile(Guid guid, string filename)
        {
            if (!IsConnected)
            {
                throw new InvalidOperationException("Start connection first!");
            }

            return await _IpcClient.InvokeAsync(x => x.SaveTaskListToXmlFile(guid, filename));
        }

        public async Task<bool> SaveAllTaskListsToXmlFile(string filename)
        {
            if (!IsConnected)
            {
                throw new InvalidOperationException("Start connection first!");
            }

            return await _IpcClient.InvokeAsync(x => x.SaveAllTaskListsToXmlFile(filename));
        }

        public async Task<TaskList> CreateTaskListFromTaskList(TaskList list)
        {
            if (!IsConnected)
            {
                throw new InvalidOperationException("Start connection first!");
            }

            return await _IpcClient.InvokeAsync(x => x.CreateTaskListFromTaskList(list));
        }

        public async Task<List<Guid>> GetTaskListGuids()
        {
            if (!IsConnected)
            {
                throw new InvalidOperationException("Start connection first!");
            }

            return await _IpcClient.InvokeAsync(x => x.GetTaskListGuids());
        }

        public async Task<List<TaskListSummary>> GetTaskListSummaries()
        {
            if (!IsConnected)
            {
                throw new InvalidOperationException("Start connection first!");
            }

            return await _IpcClient.InvokeAsync(x => x.GetTaskListSummaries());
        }

        public async Task<TaskList> QueryTaskList(Guid taskListGuid)
        {
            if (!IsConnected)
            {
                throw new InvalidOperationException("Start connection first!");
            }

            return await _IpcClient.InvokeAsync(x => x.QueryTaskList(taskListGuid));
        }

        public async Task<bool> DeleteTaskList(Guid listToDelete)
        {
            if (!IsConnected)
            {
                throw new InvalidOperationException("Start connection first!");
            }

            return await _IpcClient.InvokeAsync(x => x.DeleteTaskList(listToDelete));
        }

        public async Task<bool> UpdateTaskList(TaskList taskList)
        {
            if (!IsConnected)
            {
                throw new InvalidOperationException("Start connection first!");
            }

            return await _IpcClient.InvokeAsync(x => x.UpdateTaskList(taskList));
        }

        public async Task<TaskBase> QueryTask(Guid guid)
        {
            if (!IsConnected)
            {
                throw new InvalidOperationException("Start connection first!");
            }

            return await _IpcClient.InvokeAsync(x => x.QueryTask(guid));
        }

        public async Task<List<string>> GetInstalledApps()
        {
            if (!IsConnected)
            {
                throw new InvalidOperationException("Start connection first!");
            }

            return await _IpcClient.InvokeAsync(x => x.GetInstalledApps());
        }

        public async Task<bool> RunTaskList(Guid taskListGuid, int initialTask = 0)
        {
            if (!IsConnected)
            {
                throw new InvalidOperationException("Start connection first!");
            }

            return await _IpcClient.InvokeAsync(x => x.RunTaskList(taskListGuid, initialTask ));
        }

        public async Task AbortAll()
        {
            if (!IsConnected)
            {
                throw new InvalidOperationException("Start connection first!");
            }

            await _IpcClient.InvokeAsync(x => x.AbortAll());
        }

        public async Task AbortTaskList(Guid taskListGuid)
        {
            if (!IsConnected)
            {
                throw new InvalidOperationException("Start connection first!");
            }

            await _IpcClient.InvokeAsync(x => x.AbortTaskList(taskListGuid));
        }

        public async Task AbortTaskRun(Guid taskRunGuid)
        {
            if (!IsConnected)
            {
                throw new InvalidOperationException("Start connection first!");
            }

            await _IpcClient.InvokeAsync(x => x.AbortTaskRun(taskRunGuid));
        }

        public async Task<TaskRun> RunExecutable(string exeFilePath, string arguments, string logFilePath = null)
        {
            if (!IsConnected)
            {
                throw new InvalidOperationException("Start connection first!");
            }

            return await _IpcClient.InvokeAsync(x => x.RunExecutable(exeFilePath, arguments, logFilePath ));
        }

        public async Task<TaskRun> RunApp(string packageFamilyName)
        {
            if (!IsConnected)
            {
                throw new InvalidOperationException("Start connection first!");
            }

            return await _IpcClient.InvokeAsync(x => x.RunApp(packageFamilyName));
        }

        public async Task<TaskRun> RunTask(Guid taskGuid)
        {
            if (!IsConnected)
            {
                throw new InvalidOperationException("Start connection first!");
            }

            return await _IpcClient.InvokeAsync(x => x.RunTask(taskGuid));
        }

        public async Task<TaskRun> RunTask(TaskBase task)
        {
            if (!IsConnected)
            {
                throw new InvalidOperationException("Start connection first!");
            }

            return await _IpcClient.InvokeAsync(x => x.RunTask(task));
        }

        public async Task<bool> UpdateTaskRun(TaskRun taskRun)
        {
            if (!IsConnected)
            {
                throw new InvalidOperationException("Start connection first!");
            }

            return await _IpcClient.InvokeAsync(x => x.UpdateTaskRun(taskRun));
        }

        public async Task<TaskRun> QueryTaskRun(Guid taskRunGuid)
        {
            if (!IsConnected)
            {
                throw new InvalidOperationException("Start connection first!");
            }

            return await _IpcClient.InvokeAsync(x => x.QueryTaskRun(taskRunGuid));
        }

        public async Task<byte[]> GetFile(string sourceFilename)
        {
            if (!IsConnected)
            {
                throw new InvalidOperationException("Start connection first!");
            }

            return await _IpcClient.InvokeAsync(x => x.GetFile(sourceFilename));
        }

        public async Task<bool> SendFile(string targetFilename, byte[] fileData)
        {
            if (!IsConnected)
            {
                throw new InvalidOperationException("Start connection first!");
            }

            return await _IpcClient.InvokeAsync(x => x.SendFile(targetFilename, fileData));
        }


    }
}
