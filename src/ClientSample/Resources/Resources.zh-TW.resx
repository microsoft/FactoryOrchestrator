<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ClientSampleUsage" xml:space="preserve">
    <value>{0} &lt;DUT IP 位址&gt; &lt;此電腦上包含測試內容和 (選用) FactoryOrchestratorXML 檔案的資料夾&gt; &lt;DUT 上的目的地資料夾&gt; &lt;此電腦上用於儲存記錄的目的地資料夾&gt;</value>
  </data>
  <data name="Completed" xml:space="preserve">
    <value>在 {0} 中已複製的測試檔案、已執行的測試，以及收集的記錄</value>
  </data>
  <data name="ConnectedToIp" xml:space="preserve">
    <value>已連線至 {0}。</value>
  </data>
  <data name="CopyComplete" xml:space="preserve">
    <value>已將 {0} 位元組複製到裝置。</value>
  </data>
  <data name="CopyingFiles" xml:space="preserve">
    <value>正在裝置上將最新的二進位檔案和 TaskList 從 {0} 複製至 {1}...</value>
  </data>
  <data name="CreatingListFromDirectory" xml:space="preserve">
    <value>從 {0} 目錄中的檔案建立 TaskList...</value>
  </data>
  <data name="Exception" xml:space="preserve">
    <value>嚴重例外!</value>
  </data>
  <data name="ExecutingTaskList" xml:space="preserve">
    <value>正在執行 TaskList {0}...</value>
  </data>
  <data name="Failed" xml:space="preserve">
    <value>失敗!</value>
  </data>
  <data name="InstallingApp" xml:space="preserve">
    <value>正在安裝 {0}。這可能需要幾分鐘的時間...</value>
  </data>
  <data name="InvalidDir" xml:space="preserve">
    <value>{0} 不是有效的目錄路徑!</value>
  </data>
  <data name="InvalidIp" xml:space="preserve">
    <value>「{0}」不是正確的 IP 位址!</value>
  </data>
  <data name="LoadingFOXML" xml:space="preserve">
    <value>正在從 FactoryOrchestratorXML 檔案載入 TaskList...</value>
  </data>
  <data name="LogsCopiedTo" xml:space="preserve">
    <value>記錄已複製到</value>
  </data>
  <data name="LookingForApps" xml:space="preserve">
    <value>在 {0} 的子資料夾中尋找應用程式...</value>
  </data>
  <data name="NotEnoughArgs" xml:space="preserve">
    <value>請指定 IP、測試內容、目的地目錄及記錄輸出資料夾!</value>
  </data>
  <data name="OverallResult" xml:space="preserve">
    <value>整體結果</value>
  </data>
  <data name="Passed" xml:space="preserve">
    <value>通過!</value>
  </data>
  <data name="ResultsFor" xml:space="preserve">
    <value>下列項目的結果:</value>
  </data>
  <data name="RunningFor" xml:space="preserve">
    <value>執行 {0} 秒</value>
  </data>
  <data name="RunningTasks" xml:space="preserve">
    <value>執行工作:</value>
  </data>
  <data name="SummaryHeader" xml:space="preserve">
    <value>TaskList 執行摘要</value>
  </data>
  <data name="TaskListComplete" xml:space="preserve">
    <value>TaskList {0} 已完成!</value>
  </data>
  <data name="TaskTime" xml:space="preserve">
    <value>工作耗時 {0} 秒。</value>
  </data>
  <data name="TooManyApps" xml:space="preserve">
    <value>在 {0} 中找到多個應用程式!</value>
  </data>
  <data name="TooManyCerts" xml:space="preserve">
    <value>在 {0} 中找到多個憑證!</value>
  </data>
  <data name="TotalSize" xml:space="preserve">
    <value>大小總計: {0} 位元組。</value>
  </data>
  <data name="TotalTime" xml:space="preserve">
    <value>載入及執行所有 TaskList 的總時間:</value>
  </data>
  <data name="Usage" xml:space="preserve">
    <value>使用方式:</value>
  </data>
  <data name="WaitingForService" xml:space="preserve">
    <value>正在等候 {0} 上的 Factory Orchestrator 服務...</value>
  </data>
  <data name="WithExitCode" xml:space="preserve">
    <value>具有結束代碼</value>
  </data>
</root>