<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ClientSampleUsage" xml:space="preserve">
    <value>{0} &lt;DUT 的 IP 地址&gt; &lt;此电脑上的文件夹，其中包含测试内容和(可选) FactoryOrchestratorXML 文件&gt; &lt;DUT 上的目标文件夹&gt; &lt;此电脑上的目标文件夹，用于保存日志&gt;</value>
  </data>
  <data name="Completed" xml:space="preserve">
    <value>复制的测试文件，运行的测试，并收集的日志 {0}</value>
  </data>
  <data name="ConnectedToIp" xml:space="preserve">
    <value>已连接到 {0}。</value>
  </data>
  <data name="CopyComplete" xml:space="preserve">
    <value>已将 {0} 字节复制到设备。</value>
  </data>
  <data name="CopyingFiles" xml:space="preserve">
    <value>正在将设备上最新的二进制文件和任务列表从 {0} 复制到 {1}...</value>
  </data>
  <data name="CreatingListFromDirectory" xml:space="preserve">
    <value>根据 {0} 目录中的文件创建任务列表...</value>
  </data>
  <data name="Exception" xml:space="preserve">
    <value>致命异常!</value>
  </data>
  <data name="ExecutingTaskList" xml:space="preserve">
    <value>正在执行任务列表 {0}...</value>
  </data>
  <data name="Failed" xml:space="preserve">
    <value>失败!</value>
  </data>
  <data name="InstallingApp" xml:space="preserve">
    <value>正在安装 {0}。这可能需要几分钟的时间...</value>
  </data>
  <data name="InvalidDir" xml:space="preserve">
    <value>{0} 不是有效的目录路径!</value>
  </data>
  <data name="InvalidIp" xml:space="preserve">
    <value>{0} 不是有效的 IP 地址!</value>
  </data>
  <data name="LoadingFOXML" xml:space="preserve">
    <value>正在从 FactoryOrchestratorXML file(s) 加载任务列表...</value>
  </data>
  <data name="LogsCopiedTo" xml:space="preserve">
    <value>日志已复制到</value>
  </data>
  <data name="LookingForApps" xml:space="preserve">
    <value>正在 {0} 的子文件夹中查找应用...</value>
  </data>
  <data name="NotEnoughArgs" xml:space="preserve">
    <value>指定 IP、测试内容、目标目录和日志输出文件夹！</value>
  </data>
  <data name="OverallResult" xml:space="preserve">
    <value>总体结果</value>
  </data>
  <data name="Passed" xml:space="preserve">
    <value>已通过!</value>
  </data>
  <data name="ResultsFor" xml:space="preserve">
    <value>  的结果</value>
  </data>
  <data name="RunningFor" xml:space="preserve">
    <value>运行 {0} 秒</value>
  </data>
  <data name="RunningTasks" xml:space="preserve">
    <value>正在运行任务:</value>
  </data>
  <data name="SummaryHeader" xml:space="preserve">
    <value>任务列表执行摘要</value>
  </data>
  <data name="TaskListComplete" xml:space="preserve">
    <value>任务列表 {0} 已完成!</value>
  </data>
  <data name="TaskTime" xml:space="preserve">
    <value>任务花费了 {0} 秒。</value>
  </data>
  <data name="TooManyApps" xml:space="preserve">
    <value>在 {0} 中找到多个应用!</value>
  </data>
  <data name="TooManyCerts" xml:space="preserve">
    <value>在 {0} 中找到多个证书!</value>
  </data>
  <data name="TotalSize" xml:space="preserve">
    <value>总大小: {0} 字节。</value>
  </data>
  <data name="TotalTime" xml:space="preserve">
    <value>加载和执行所有任务列表的总时间:</value>
  </data>
  <data name="Usage" xml:space="preserve">
    <value>用法:</value>
  </data>
  <data name="WaitingForService" xml:space="preserve">
    <value>正在等待 {0} 上的 Factory Orchestrator 服务...</value>
  </data>
  <data name="WithExitCode" xml:space="preserve">
    <value>带退出代码</value>
  </data>
</root>