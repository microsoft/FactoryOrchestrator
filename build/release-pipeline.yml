#Multi-configuration and multi-agent job options are not exported to YAML. Configure these options using documentation guidance: https://docs.microsoft.com/vsts/pipelines/process/phases
trigger:
  tags:
    include:
    - OSBuild*

resources:
  repositories:
  - repository: ComplianceRepo
    type: github
    endpoint: microsoft
    name: spaceisfun/Compliance
    ref: master

variables:
  BuildConfiguration: 'Release'
  ${{ if or(startsWith(variables['Build.SourceBranchName'], 'OSBuild'), eq(variables['Build.SourceBranchName'], 'main')) }}:
    VERSIONSUFFIX: ''
    VERSIONSUFFIXVPACK: ''
    VERSIONSUFFIXDOTNET: ' '
    SKIPSIGNING: 'false'
    SKIPPUSH: 'false'
  ${{ if not(or(startsWith(variables['Build.SourceBranchName'], 'OSBuild'), eq(variables['Build.SourceBranchName'], 'main'))) }}:
    VERSIONSUFFIX: '$(Build.SourceBranchName)'
    VERSIONSUFFIXVPACK: '-$(Build.SourceBranchName)'
    VERSIONSUFFIXDOTNET: '--version-suffix $(Build.SourceBranchName)'
    SKIPSIGNING: 'true'
    SKIPPUSH: 'true'

name: $(BuildDefinitionName)_$(date:yyMM).$(date:dd)$(rev:rrr)

stages:
  - stage: 'Build_Test_FactoryOrchestrator_Windows_AnyCPU'
    pool:
      name: "Hosted Windows 2019 with VS2019"
      demands:
      - msbuild
      - visualstudio

    jobs:
    - job: "Build_Test_FactoryOrchestrator_Windows_AnyCPU"
      variables:
        BuildPlatform: 'AnyCPU'
        FORepoRoot: '$(Build.SourcesDirectory)'
      steps:
      - checkout: self
      - template: ./templates/template-set-build-version.yml
      - template: ./templates/template-install-netcore.yml
      - pwsh: |
          Get-Item -Path env:* | Sort-Object Name
        displayName: "Print all variables"
      - template: ./templates/template-build-test-service.yml
      - template: ./templates/template-build-service-windows-runtimes.yml
      - template: ./templates/template-build-uwpclient.yml
      - publish: '$(Build.ARTIFACTSTAGINGDIRECTORY)\bin\$(BuildConfiguration)\$(BuildPlatform)'
        artifact: 'UnsignedBin_Windows_$(BuildConfiguration)_$(BuildPlatform)'
        displayName: 'Publish unsigned binaries AnyCPU'
      - template: ./templates/template-checkdocs.yml

  - stage: 'Build_Test_FactoryOrchestrator_Windows_Apps'
    dependsOn:
    - 'Build_Test_FactoryOrchestrator_Windows_AnyCPU'
    pool:
      name: "Hosted Windows 2019 with VS2019"
      demands:
      - msbuild
      - visualstudio

    jobs:      
    - job: "Build_FactoryOrchestrator_App"
      variables:
        FORepoRoot: '$(Build.SourcesDirectory)'
      strategy:
        matrix:
          Release_x86:
            BuildPlatform: 'x86'
          Release_x64:
            BuildPlatform: 'x64'
          Release_Arm:
            BuildPlatform: 'ARM'
        maxParallel: '3'
      steps:
      - checkout: self
      - template: ./templates/template-set-build-version.yml
      - template: ./templates/template-install-netcore.yml
      - pwsh: |
          Get-Item -Path env:* | Sort-Object Name
        displayName: "Print all variables"
      - download: current
        artifact: 'UnsignedBin_Windows_$(BuildConfiguration)_AnyCPU'
      - task: CopyFiles@2
        inputs:
          sourceFolder: "$(Pipeline.Workspace)/UnsignedBin_Windows_$(BuildConfiguration)_AnyCPU"
          targetFolder: "$(Build.ARTIFACTSTAGINGDIRECTORY)/bin/$(BuildConfiguration)/AnyCPU"
      - template: ./templates/template-build-app.yml
      - publish: '$(Build.ARTIFACTSTAGINGDIRECTORY)\bin\$(BuildConfiguration)\$(BuildPlatform)'
        artifact: 'UnsignedBin_Windows_$(BuildConfiguration)_$(BuildPlatform)'
        displayName: 'Publish unsigned Windows bin'
      - task: CopyFiles@2
        inputs:
          sourceFolder: "$(FORepoRoot)/src/UWPClientLibrary/obj/$(BuildConfiguration)/"
          targetFolder: "$(Build.ARTIFACTSTAGINGDIRECTORY)/UWPClientLibraryNuspecs/"
          contents: "*.nuspec"
        displayName: 'Copy Windows UWPClient nuspecs'
        condition: eq(variables['BuildPlatform'], 'x86')
      - publish: '$(Build.ARTIFACTSTAGINGDIRECTORY)/UWPClientLibraryNuspecs/'
        artifact: 'UWPClient_Nuspecs'
        displayName: 'Publish Windows UWPClient nuspecs'
        condition: eq(variables['BuildPlatform'], 'x86')

  - stage: 'Sign_Binaries'
    pool:
      name: "Hosted Windows 2019 with VS2019"
      demands:
      - msbuild
      - visualstudio
    dependsOn:
    - 'Build_Test_FactoryOrchestrator_Windows_Apps'
    jobs:
      - job: 'Sign_Windows'
        variables:
          FORepoRoot: '$(Build.SourcesDirectory)/FactoryOrchestrator_Internal'
        steps:
        - checkout: self
          clean: true
        - checkout: ComplianceRepo
          clean: true
        - template: ./templates/template-set-should-sign.yml
        - pwsh: |
            Get-Item -Path env:* | Sort-Object Name
          displayName: "Print all variables"
        # Use these commented DownloadPipelineArtifact@2 tasks to use an older build artifact for testing.
        # Useful to quickly iterate on later stages of the build.
        # Tag the older build whose artifacts you want to use with '__testing'.
        # - task: DownloadPipelineArtifact@2
        #   inputs:
        #     source: specific
        #     artifact: UnsignedBin_Windows_$(BuildConfiguration)_AnyCPU
        #     allowFailedBuilds: true
        #     allowPartiallySucceededBuilds: true
        #     project: 'OneCore'
        #     pipeline: 60364
        #     runVersion: 'latest'
        #     tags: '__testing'
        #     path: "$(Pipeline.Workspace)/UnsignedBin_Windows_$(BuildConfiguration)_AnyCPU"
        # - task: DownloadPipelineArtifact@2
        #   inputs:
        #     source: specific
        #     artifact: UnsignedBin_Windows_$(BuildConfiguration)_x86
        #     allowFailedBuilds: true
        #     allowPartiallySucceededBuilds: true
        #     project: 'OneCore'
        #     pipeline: 60364
        #     runVersion: 'latest'
        #     tags: '__testing'
        #     path: "$(Pipeline.Workspace)/UnsignedBin_Windows_$(BuildConfiguration)_x86"
        # - task: DownloadPipelineArtifact@2
        #   inputs:
        #     source: specific
        #     artifact: UnsignedBin_Windows_$(BuildConfiguration)_x64
        #     allowFailedBuilds: true
        #     allowPartiallySucceededBuilds: true
        #     project: 'OneCore'
        #     pipeline: 60364
        #     runVersion: 'latest'
        #     tags: '__testing'
        #     path: "$(Pipeline.Workspace)/UnsignedBin_Windows_$(BuildConfiguration)_x64"
        # - task: DownloadPipelineArtifact@2
        #   inputs:
        #     source: specific
        #     artifact: UnsignedBin_Windows_$(BuildConfiguration)_ARM
        #     allowFailedBuilds: true
        #     allowPartiallySucceededBuilds: true
        #     project: 'OneCore'
        #     pipeline: 60364
        #     runVersion: 'latest'
        #     tags: '__testing'
        #     path: "$(Pipeline.Workspace)/UnsignedBin_Windows_$(BuildConfiguration)_ARM"
        - download: current
          artifact: UnsignedBin_Windows_$(BuildConfiguration)_AnyCPU
        - download: current
          artifact: UnsignedBin_Windows_$(BuildConfiguration)_x86
        - download: current
          artifact: UnsignedBin_Windows_$(BuildConfiguration)_x64
        - download: current
          artifact: UnsignedBin_Windows_$(BuildConfiguration)_ARM
        - task: CopyFiles@2
          inputs:
            sourceFolder: "$(Pipeline.Workspace)/UnsignedBin_Windows_$(BuildConfiguration)_AnyCPU"
            targetFolder: "$(Build.ARTIFACTSTAGINGDIRECTORY)/unsignedbin/AnyCPU"
        - task: CopyFiles@2
          inputs:
            sourceFolder: "$(Pipeline.Workspace)/UnsignedBin_Windows_$(BuildConfiguration)_x86"
            targetFolder: "$(Build.ARTIFACTSTAGINGDIRECTORY)/unsignedbin/x86"
        - task: CopyFiles@2
          inputs:
            sourceFolder: "$(Pipeline.Workspace)/UnsignedBin_Windows_$(BuildConfiguration)_x64"
            targetFolder: "$(Build.ARTIFACTSTAGINGDIRECTORY)/unsignedbin/x64"
        - task: CopyFiles@2
          inputs:
            sourceFolder: "$(Pipeline.Workspace)/UnsignedBin_Windows_$(BuildConfiguration)_ARM"
            targetFolder: "$(Build.ARTIFACTSTAGINGDIRECTORY)/unsignedbin/ARM"
        - template: ./templates/template-sign-binaries-windows.yml
          parameters:
            ShouldSign: "$(SHOULDSIGN)"

  - stage: compliance
    displayName: Compliance
    dependsOn:
    - 'Sign_Binaries'
    jobs:
      - job: Compliance_Job
        variables:
          FORepoRoot: '$(Build.SourcesDirectory)/FactoryOrchestrator_Internal'
        pool:
          name: Package ES Standard Build
        steps:
        - checkout: self
          clean: true
        
        - checkout: ComplianceRepo
          clean: true
        
        - task: PkgESSetupBuild@10
          displayName: 'Package ES - Setup Build'
          inputs:
            branchVersion: true
            branchVersionExcludeBranch: 'main'
            productName: 'FactoryOrchestrator'
            disableOutputRedirect: true
            disableMsbuildVersion: true
            useDfs: false

        - template: ./templates/template-set-build-version.yml

        - pwsh: |
            Get-Item -Path env:* | Sort-Object Name
          displayName: "Print all variables"

        # Use these commented DownloadPipelineArtifact@2 tasks to use an older build artifact for testing.
        # Useful to quickly iterate on later stages of the build.
        # Tag the older build whose artifacts you want to use with '__testing'.
        # - task: DownloadPipelineArtifact@2
        #   inputs:
        #     source: specific
        #     artifact: SignedBin_Windows_Release_AllPlatforms
        #     allowFailedBuilds: true
        #     allowPartiallySucceededBuilds: true
        #     project: 'OneCore'
        #     pipeline: 60364
        #     runVersion: 'latest'
        #     tags: '__testing'
        #     path: "$(Pipeline.Workspace)/SignedBin_Windows_Release_AllPlatforms"
        - download: 'current'
          artifact: 'SignedBin_Windows_Release_AllPlatforms'

        - template: assembly-module-compliance.yml@ComplianceRepo
          parameters:
            # binskim
            AnalyzeTarget: '$(Pipeline.Workspace)/SignedBin_Windows_Release_AllPlatforms/*JKang.*.dll;$(Pipeline.Workspace)/SignedBin_Windows_Release_AllPlatforms/*PE-Utility.dll;$(Pipeline.Workspace)/SignedBin_Windows_Release_AllPlatforms/*PeterKottas.*.dll;$(Pipeline.Workspace)/SignedBin_Windows_Release_AllPlatforms/*DasMulli.*.dll;$(Pipeline.Workspace)/SignedBin_Windows_Release_AllPlatforms/*FactoryOrchestraor*.dll;$(Pipeline.Workspace)/SignedBin_Windows_Release_AllPlatforms/*FactoryOrchestrator*.exe'
            AnalyzeSymPath: 'SRV*'
            # component-governance
            sourceScanPath: '$(FORepoRoot)/src'
            # credscan
            suppressionsFile: '$(FORepoRoot)/build/config/CredScanSuppressions.json'
            # TermCheck
            optionsRulesDBPath: ''
            optionsFTPath: ''
            # tsa-upload
            codeBaseName: 'FactoryOrchestrator'
            # API Scan
            softwareFolder: '$(Pipeline.Workspace)/SignedBin_Windows_Release_AllPlatforms'
            softwareName: 'FactoryOrchestrator'
            softwareVersion: '$(VERSIONPREFIX)$(VERSIONSUFFIXVPACK)'
            APIScan: true # set to false when not using Windows APIs.

        - task: PkgESLateTasks@10
          displayName: 'PkgES Finalize and Cleanup'

  - stage: 'Sign_Publish_NuGet'
    dependsOn:
    - 'compliance'
    pool:
      name: "Hosted Windows 2019 with VS2019"
      demands:
      - msbuild
      - visualstudio
    jobs:
      - job: Sign_Publish_NuGet
        variables:
          FORepoRoot: '$(Build.SourcesDirectory)/FactoryOrchestrator_Internal'
        steps:
        - checkout: self
          clean: true
        - checkout: ComplianceRepo
          clean: true
        
        - template: ./templates/template-set-build-version.yml
        - template: ./templates/template-set-should-sign.yml
        - template: ./templates/template-install-netcore.yml
        - task: NuGetToolInstaller@1
        - pwsh: |
            Get-Item -Path env:* | Sort-Object Name
          displayName: "Print all variables"
        - task: DotNetCoreCLI@2
          inputs:
            command: 'restore'
            projects: '$(FORepoRoot)\src\FactoryOrchestratorNoApp.sln'
          displayName: 'dotnet restore'

        # Use these commented DownloadPipelineArtifact@2 tasks to use an older build artifact for testing.
        # Useful to quickly iterate on later stages of the build.
        # Tag the older build whose artifacts you want to use with '__testing'.
        # - task: DownloadPipelineArtifact@2
        #   inputs:
        #     source: specific
        #     artifact: SignedBin_Windows_Release_AllPlatforms
        #     allowFailedBuilds: true
        #     allowPartiallySucceededBuilds: true
        #     project: 'OneCore'
        #     pipeline: 60364
        #     runVersion: 'latest'
        #     tags: '__testing'
        #     path: "$(Pipeline.Workspace)/SignedBin_Windows_Release_AllPlatforms"
        # - task: DownloadPipelineArtifact@2
        #   inputs:
        #     source: specific
        #     artifact: UWPClient_Nuspecs
        #     allowFailedBuilds: true
        #     allowPartiallySucceededBuilds: true
        #     project: 'OneCore'
        #     pipeline: 60364
        #     runVersion: 'latest'
        #     tags: '__testing'
        #     path: "$(Pipeline.Workspace)/UWPClient_Nuspecs"

        - download: 'current'
          artifact: 'SignedBin_Windows_Release_AllPlatforms'

        - download: 'current'
          artifact: 'UWPClient_Nuspecs'

        - task: CopyFiles@2
          inputs:
            sourceFolder: "$(Pipeline.Workspace)/SignedBin_Windows_Release_AllPlatforms"
            targetFolder: "$(Build.ARTIFACTSTAGINGDIRECTORY)/bin/Release"

        - template: ./templates/template-sign-publish-nuget.yml
          parameters:
            ShouldSign: "$(SHOULDSIGN)"

  - stage: 'Publish_vPack'
    dependsOn:
    - 'compliance'
    pool:
      name: Package ES Standard Build
    jobs:
      - job: Publish_vPacks
        variables:
          FORepoRoot: '$(Build.SourcesDirectory)'
        steps:
        - checkout: self
          clean: true

        - task: PkgESSetupBuild@10
          displayName: 'Package ES - Setup Build'
          inputs:
            branchVersion: true
            branchVersionExcludeBranch: 'main'
            productName: 'FactoryOrchestrator'
            disableOutputRedirect: true
            disableMsbuildVersion: true
            useDfs: false
        
        - template: ./templates/template-set-build-version.yml

        - pwsh: |
            Get-Item -Path env:* | Sort-Object Name
          displayName: "Print all variables"

        # Use these commented DownloadPipelineArtifact@2 tasks to use an older build artifact for testing.
        # Useful to quickly iterate on later stages of the build.
        # Tag the older build whose artifacts you want to use with '__testing'.
        # - task: DownloadPipelineArtifact@2
        #   inputs:
        #     source: specific
        #     artifact: SignedBin_Windows_Release_AllPlatforms
        #     allowFailedBuilds: true
        #     allowPartiallySucceededBuilds: true
        #     project: 'OneCore'
        #     pipeline: 60364
        #     runVersion: 'latest'
        #     tags: '__testing'
        #     path: "$(Pipeline.Workspace)/SignedBin_Windows_Release_AllPlatforms"
        - download: 'current'
          artifact: 'SignedBin_Windows_Release_AllPlatforms'

        - task: CopyFiles@2
          inputs:
            sourceFolder: "$(Pipeline.Workspace)/SignedBin_Windows_Release_AllPlatforms"
            targetFolder: "$(Build.ARTIFACTSTAGINGDIRECTORY)/bin/Release"

        - template: ./templates/template-publish-vpack-service.yml
          parameters:
            BuildConfiguration: 'Release'
            BuildPlatform: 'x86'
        - template: ./templates/template-publish-vpack-service.yml
          parameters:
            BuildConfiguration: 'Release'
            BuildPlatform: 'x64'
        - template: ./templates/template-publish-vpack-service.yml
          parameters:
            BuildConfiguration: 'Release'
            BuildPlatform: 'arm'
        - template: ./templates/template-publish-vpack-service.yml
          parameters:
            BuildConfiguration: 'Release'
            BuildPlatform: 'arm64'
        - template: ./templates/template-publish-vpack-other.yml

        # Expects ArtifactServices.Symbol.PAT secret variable to be defined with a PAT
        - pwsh: |
            $vstsCommandString = "vso[task.setvariable variable=ArtifactServices.Symbol.AccountName]microsoftpublicsymbols"
            Write-Host "sending " + $vstsCommandString
            Write-Host "##$vstsCommandString"
          displayName: 'Set symbol publish variables'

        # Publishes to microsoftpublicsymbols
        - task: PublishSymbols@2
          inputs:
            symbolsFolder: '$(Build.ArtifactStagingDirectory)/bin/'
            indexSources: 'false'
            SymbolServerType: 'teamServices'
            SymbolsArtifactName: 'Symbols_Release_NuGet'
            SymbolsProduct: 'FactoryOrchestrator'
            SymbolsVersion: '$(VersionPrefix)$(VERSIONSUFFIXVPACK)'
          condition: and(succeeded(), ne(variables['SKIPPUSH'], 'true'))
          displayName: 'publish symbols to public server'

        - publish: '$(Build.ARTIFACTSTAGINGDIRECTORY)\VPackManifests'
          artifact: VPackManifests
          condition: and(succeeded(), ne(variables['SKIPPUSH'], 'true'))

        - task: PkgESLateTasks@10
          displayName: 'PkgES Finalize and Cleanup'
