# Copyright (c) Microsoft Corporation.
# Licensed under the MIT license.

#
# Localization
# This pipeline uploads English strings files to the localization service, downloads any translated
# files which are available, and checks them in to git. This pipeline relies on Microsoft-internal
# resources to run.
#

# Expects a variable called LocServiceKey to contain the OAuth client secret for Touchdown.
trigger:
  branches:
    include:
    - main
  paths:
    include:
    - src/App/Resources/en-US/Resources.resw
    - src/ClientSample/Resources/Resources.resx
    - src/CoreLibrary/Resources/Resources.resx
pr: none

name: $(BuildDefinitionName)_$(date:yyMM).$(date:dd)$(rev:rrr)

variables:
  FORepoRoot: '$(Build.SourcesDirectory)'

jobs:
- job: Localize
  pool:
    vmImage: windows-2019
  variables:
    skipComponentGovernanceDetection: true
  steps:
  - task: MicrosoftTDBuild.tdbuild-task.tdbuild-task.TouchdownBuildTask@1
    displayName: Send App resources to Touchdown Build
    inputs:
      teamId: 14275
      authId: 1216fd85-09c7-4be1-89bf-ec60647e0d5b
      authKey: $(LocServiceKey)
      isPreview: false
      relativePathRoot: src/App/Resources/en-US/
      resourceFilePath: '*.resw'
      outputDirectoryRoot: src/App/Resources/
  - task: MicrosoftTDBuild.tdbuild-task.tdbuild-task.TouchdownBuildTask@1
    displayName: Send ClientSample resources to Touchdown Build
    inputs:
      teamId: 14275
      authId: 1216fd85-09c7-4be1-89bf-ec60647e0d5b
      authKey: $(LocServiceKey)
      isPreview: false
      relativePathRoot: src/
      resourceFilePath: 'ClientSample/Resources/Resources.resx'
      outputDirectoryRoot: src/ClientSample/Resources/
  - task: MicrosoftTDBuild.tdbuild-task.tdbuild-task.TouchdownBuildTask@1
    displayName: Send CoreLibrary resources to Touchdown Build
    inputs:
      teamId: 14275
      authId: 1216fd85-09c7-4be1-89bf-ec60647e0d5b
      authKey: $(LocServiceKey)
      isPreview: false
      relativePathRoot: src/
      resourceFilePath: 'CoreLibrary/Resources/Resources.resx'
      outputDirectoryRoot: src/CoreLibrary/Resources/
  - script: |
      move /Y $(FORepoRoot)\src\CoreLibrary\Resources\zh-CN\Resources.resx $(FORepoRoot)\src\CoreLibrary\Resources\Resources.zh-CN.resx
      move /Y $(FORepoRoot)\src\CoreLibrary\Resources\zh-TW\Resources.resx $(FORepoRoot)\src\CoreLibrary\Resources\Resources.zh-TW.resx
      move /Y $(FORepoRoot)\src\ClientSample\Resources\zh-CN\Resources.resx $(FORepoRoot)\src\ClientSample\Resources\Resources.zh-CN.resx
      move /Y $(FORepoRoot)\src\ClientSample\Resources\zh-TW\Resources.resx $(FORepoRoot)\src\ClientSample\Resources\Resources.zh-TW.resx
      cd $(FORepoRoot)
      git add -A
      git diff --cached --exit-code
      echo ##vso[task.setvariable variable=hasChanges]%errorlevel%
      git diff --cached > $(Build.ArtifactStagingDirectory)\LocalizedStrings.patch
    displayName: Check for changes and create patch file
  - task: PublishPipelineArtifact@0
    displayName: Publish patch file as artifact
    condition: eq(variables['hasChanges'], '1')
    inputs:
      artifactName: LocalizationPatch
      targetPath: $(Build.ArtifactStagingDirectory)
