# Creates NuGet packages for desired projects. Publishes to NuGet.org.
parameters:
  UwpClientNuspecFolder: '$(Pipeline.Workspace)/UWPClient_Nuspecs'

steps:
- task: DotNetCoreCLI@2
  displayName: 'dotnet pack Client'
  inputs:
    command: pack
    includesymbols: true
    nobuild: true
    packDirectory: '$(Build.ArtifactStagingDirectory)/bin/Release/unsignednuget'
    arguments: '$(Build.SourcesDirectory)\src\ClientLibrary\Microsoft.FactoryOrchestrator.Client.csproj --configuration Release --verbosity Detailed $(VERSIONSUFFIXDOTNET)'
    zipAfterPublish: false

- task: DotNetCoreCLI@2
  displayName: 'dotnet pack Core'
  inputs:
    command: pack
    includesymbols: true
    nobuild: true
    packDirectory: '$(Build.ArtifactStagingDirectory)/bin/Release/unsignednuget'
    arguments: '$(Build.SourcesDirectory)\src\CoreLibrary\Microsoft.FactoryOrchestrator.Core.csproj --configuration Release --verbosity Detailed $(VERSIONSUFFIXDOTNET)'
    zipAfterPublish: false

- task: DotNetCoreCLI@2
  displayName: 'dotnet pack Server'
  inputs:
    command: pack
    includesymbols: true
    nobuild: true
    packDirectory: '$(Build.ArtifactStagingDirectory)/bin/Release/unsignednuget'
    arguments: '$(Build.SourcesDirectory)\src\ServerLibrary\Microsoft.FactoryOrchestrator.Server.csproj --configuration Release --verbosity Detailed $(VERSIONSUFFIXDOTNET)'
    zipAfterPublish: false

# The uwp client cannot be packed by msbuild without rebuilding, which we don't want, as we must pack the signed dll.
# Instead, use the .nuspec files generated by msbuild, but call nuget.exe pack directly.
# Workaround nuget.exe pack's limitation with symbol file nuspecs by renaming the created file.
- powershell: |
    $nugetexe = $env:NUGETEXETOOLPATH
    foreach ($nuspec in Get-ChildItem -Path $(UwpClientNuspecFolder) -Filter "*.nuspec")
    {
      if ($nuspec.Name -like "*symbols.nuspec")
      {
        . $nugetexe pack $nuspec.FullName -outputdirectory "$(Build.ArtifactStagingDirectory)/tmp/Release/uwpclientsymbolnuget"
        foreach ($nupkg in Get-ChildItem -Path $(UwpClientNuspecFolder) -Filter "*.nupkg")
        {
          $name = $nupkg.BaseName
          Move-Item $nupkg $(Build.ArtifactStagingDirectory)/bin/Release/unsignednuget/$name.snupkg
        }
      }
      else
      {
        . $nugetexe pack $nuspec.FullName -outputdirectory "$(Build.ArtifactStagingDirectory)/bin/Release/unsignednuget"
      }
    }
  displayName: 'NuGet pack UWPClient'
  
- powershell: |
    $vstsCommandString = "vso[task.setvariable variable=SignedOutput]$(Build.ArtifactStagingDirectory)/bin/Release/signednuget/"
    Write-Host "sending " + $vstsCommandString
    Write-Host "##$vstsCommandString"
  displayName: Define signedOutput variables

# ​​CP-230012 is for Microsoft authored NuGets.
- template: EsrpSign.yml@ComplianceRepo
  parameters:
    # the folder which contains the binaries to sign
    buildOutputPath: '$(Build.ArtifactStagingDirectory)/bin/Release/unsignednuget/'
    # the location to put the signed output
    signOutputPath: '$(SignedOutput)'
    # the certificate ID to use
    certificateId: "​​CP-401405​"
    # The file pattern to use
    # If not using minimatch: comma separated, with * supported
    # If using minimatch: newline separated, with !, **, and * supported.
    # See link in the useMinimatch comments.
    pattern: |
      '**/*.nupkg'
      '**/*.snupkg'
    # decides if the task should use minimatch for the pattern matching.
    # https://github.com/isaacs/minimatch#features
    useMinimatch: true
    shouldSign: true
    signingService: 'FactoryOrchestratorSigning'
  condition: and(eq(variables['SKIPSIGNING'], 'false'), ne(variables['FORCESIGNING'], 'true'))

- task: CopyFiles@2
  inputs:
    sourceFolder: "$(Build.ArtifactStagingDirectory)/bin/Release/unsignednuget/"
    targetFolder: "$(SignedOutput)"
  displayName: "Copy unsigned binaries as if signed because SKIPSIGNING set"
  condition: not(and(eq(variables['SKIPSIGNING'], 'false'), ne(variables['FORCESIGNING'], 'true')))

- template: EsrpScan.yml@ComplianceRepo
  parameters:
      scanPath: $(SignedOutput)
      pattern: |
        **\*.nupkg
        **\*.snupkg

- publish: '$(SignedOutput)'
  artifact: "SignedNugets_Windows_Release"

# Note: nugets are currently not automatically published to NuGet.org. That is done manually by a Microsoft 'OneCoreOSS' employee.