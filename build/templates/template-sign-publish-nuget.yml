# Creates NuGet packages for desired projects. Publishes to NuGet.org.
parameters:
  - name: "UwpClientNuspecFolder"
    default: "$(Pipeline.Workspace)/UWPClient_Nuspecs"
  - name: "ShouldSign"
    default: "false"

steps:
- task: DotNetCoreCLI@2
  displayName: 'dotnet pack Client'
  inputs:
    command: 'custom'
    custom: 'pack'
    arguments: '$(FORepoRoot)/src/ClientLibrary/Microsoft.FactoryOrchestrator.Client.csproj --configuration Release --verbosity Detailed -p:SolutionDir=$(FORepoRoot)/src/ --no-build --no-restore $(VERSIONSUFFIXDOTNET) -o $(Build.ArtifactStagingDirectory)/bin/Release/unsignednuget --include-symbols --nologo'

- task: DotNetCoreCLI@2
  displayName: 'dotnet pack Core'
  inputs:
    command: 'custom'
    custom: 'pack'
    arguments: '$(FORepoRoot)/src/CoreLibrary/Microsoft.FactoryOrchestrator.Core.csproj --configuration Release --verbosity Detailed -p:SolutionDir=$(FORepoRoot)/src/ --no-build --no-restore $(VERSIONSUFFIXDOTNET) -o $(Build.ArtifactStagingDirectory)/bin/Release/unsignednuget --include-symbols --nologo'

- task: DotNetCoreCLI@2
  displayName: 'dotnet pack Server'
  inputs:
    command: 'custom'
    custom: 'pack'
    arguments: '$(FORepoRoot)/src/ServerLibrary/Microsoft.FactoryOrchestrator.Server.csproj --configuration Release --verbosity Detailed -p:SolutionDir=$(FORepoRoot)/src/ --no-build --no-restore $(VERSIONSUFFIXDOTNET) -o $(Build.ArtifactStagingDirectory)/bin/Release/unsignednuget --include-symbols --nologo'

# The uwp client cannot be packed by msbuild without rebuilding, which we don't want, as we must pack the signed dll.
# Instead, use the .nuspec files generated by msbuild, but call nuget.exe pack directly.
# Workaround nuget.exe pack's limitation with symbol file nuspecs by renaming the created file.
- pwsh: |
    $nugetexe = $env:NUGETEXETOOLPATH
    $specs = Get-ChildItem -Path $env:parameters_UwpClientNuspecFolder -Filter "*.nuspec"
    foreach ($nuspec in $specs)
    {
      if ($($nuspec.Name) -like "*symbols.nuspec")
      {
        Write-Host "$nugetexe pack $($nuspec.FullName) -outputdirectory `"$env:Build_ArtifactStagingDirectory/tmp/Release/uwpclientsymbolnuget`""
        . $nugetexe pack $nuspec.FullName -outputdirectory "$env:Build_ArtifactStagingDirectory/tmp/Release/uwpclientsymbolnuget"
        $pkgs =  Get-ChildItem -Path $env:parameters_UwpClientNuspecFolder -Filter "*.nupkg"
        foreach ($nupkg in $pkgs)
        {
          $name = $nupkg.BaseName
          Move-Item $nupkg $env:Build_ArtifactStagingDirectory/bin/Release/unsignednuget/$name.snupkg
        }
      }
      else
      {
        Write-Host "$nugetexe pack $($nuspec.FullName) -outputdirectory `"$env:Build_ArtifactStagingDirectory/bin/Release/unsignednuget`""
        . $nugetexe pack $($nuspec.FullName) -outputdirectory "$env:Build_ArtifactStagingDirectory/bin/Release/unsignednuget"
      }
    }
  displayName: 'NuGet pack UWPClient'

- pwsh: |
    $vstsCommandString = "vso[task.setvariable variable=SignedOutput]$(Build.ArtifactStagingDirectory)/bin/Release/signednuget/"
    Write-Host "sending " + $vstsCommandString
    Write-Host "##$vstsCommandString"
  displayName: Define signedOutput variables

# ​​CP-401405​ is for Microsoft authored NuGets.
- template: EsrpSign.yml@ComplianceRepo
  parameters:
    # the folder which contains the binaries to sign
    buildOutputPath: '$(Build.ArtifactStagingDirectory)/bin/Release/unsignednuget/'
    # the location to put the signed output
    signOutputPath: '$(SignedOutput)'
    # the certificate ID to use
    certificateId: "​​CP-401405​"
    # The file pattern to use
    # If not using minimatch: comma separated, with * supported
    # If using minimatch: newline separated, with !, **, and * supported.
    # See link in the useMinimatch comments.
    pattern: '*.nupkg,*.snupkg'
    # decides if the task should use minimatch for the pattern matching.
    # https://github.com/isaacs/minimatch#features
    useMinimatch: false
    shouldSign: ${{ parameters.ShouldSign }}
    alwaysCopy: 'true'
    signingService: 'FactoryOrchestratorSigning'

- publish: '$(SignedOutput)'
  artifact: "SignedNugets_Windows_Release"

# Note: nugets are currently not automatically published to NuGet.org. That is done manually by a Microsoft 'OneCoreOSS' employee.