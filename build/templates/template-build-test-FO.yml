steps:
    - task: NuGetToolInstaller@0
      displayName: 'Use NuGet 5.7.0'
      inputs:
        versionSpec: 5.7.0
    - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
      displayName: 'NuGet restore'
      inputs:
        command: 'restore'
        restoreSolution: '$(System.DefaultWorkingDirectory)\src\App\FactoryOrchestratorApp.csproj'
    - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
      displayName: 'NuGet restore'
      inputs:
        command: 'restore'
        restoreSolution: '$(System.DefaultWorkingDirectory)\src\UWPClientLibrary\FactoryOrchestratorUWPClientLibrary.csproj'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'restore'
        projects: '$(System.DefaultWorkingDirectory)\src\FactoryOrchestrator.sln'
    - task: VSBuild@1
      displayName: 'Build solution **\*.sln Any CPU'
      inputs:
        platform: 'Any CPU'
        configuration: 'Release'
    - task: VSBuild@1
      displayName: 'Build solution **\*.sln x64'
      inputs:
        platform: x64
        configuration: 'Release'
    - task: VSBuild@1
      displayName: 'Build solution **\*.sln ARM'
      inputs:
        platform: ARM
        configuration: 'Release'
    - task: VSBuild@1
      displayName: 'Build solution **\*.sln x86 and all arch AppXPackage'
      inputs:
        platform: x86
        configuration: 'Release'
        msbuildArgs: '/p:AppxBundlePlatforms="x86|x64|arm" /p:AppxPackageDir="$(build.artifactStagingDirectory)\AppxPackages\\" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=Sideload'
    - task: VSTest@2
      displayName: 'Run UnitTests'
      inputs:
        testAssemblyVer2: |
          bin/Tests/**/*UnitTests.dll
          bin/Tests/**/JKang*Tests.dll
        searchFolder: '$(System.DefaultWorkingDirectory)'
        codeCoverageEnabled: true
        runInParallel: true
        vsTestVersion: latest
        runSettingsFile: '$(System.DefaultWorkingDirectory)\src\Tests\defaults.runsettings'
    - script: |
        cd $(Build.SourcesDirectory)
        mkdir $(Build.ArtifactStagingDirectory)\Patch
        pip install --upgrade pip --upgrade -r $(System.DefaultWorkingDirectory)\docs\requirements.txt
        mkdocs build --clean --config-file $(System.DefaultWorkingDirectory)\docs\mkdocs.yml
        git reset HEAD --hard
        git fetch
        git checkout gh-pages
        robocopy $(System.DefaultWorkingDirectory)\docs\site\ $(System.DefaultWorkingDirectory)\ /S
        git restore sitemap.xml*
        git add -A
        git status > $(Build.ArtifactStagingDirectory)\Patch\GitStatus.txt
        git diff --cached --exit-code > $(Build.ArtifactStagingDirectory)\Patch\GitDiff.txt
        echo ##vso[task.setvariable variable=hasChanges]%errorlevel%
        git diff --cached > $(Build.ArtifactStagingDirectory)\Patch\UpdatedDocs.patch
      displayName: 'Build website and check for changes'
    - task: PublishPipelineArtifact@1
      displayName: 'Publish patch file as artifact if website has changes'
      condition: eq(variables['hasChanges'], '1')
      inputs:
        artifactName: UpdatedDocsPatch
        targetPath: $(Build.ArtifactStagingDirectory)\Patch
    - script: |
        echo ##vso[task.logissue type=warning]gh-pages documentation needs updating! Use the published UpdatedDocsPatch artifact to update the gh-pages branch after this PR is completed.
      displayName: 'Warn if website has changes'
      condition: eq(variables['hasChanges'], '1')
