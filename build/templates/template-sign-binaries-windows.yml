# Signs all Windows binaries. Requires unsigned binaries published to UnsignedBin_Windows_$(BuildConfiguration)_$(BuildPlatform).
parameters:
  - name: "UnsignedInput"
    default: "$(Build.ArtifactStagingDirectory)/unsignedbin/"
  - name: "SignedOutput"
    default: "$(Build.ArtifactStagingDirectory)/signedbin/"
  - name: "ShouldSign"
    default: "false"
steps:
- pwsh: |
    $outputDir = "${{ parameters.UnsignedInput }}"
    $outputDir = $outputDir.Replace('\', '/')
    Get-ChildItem -Path $outputDir -Recurse -Directory -Filter "ilc" | Remove-Item -Recurse -Force
  displayName: "Delete ilc App folders"

# uniqify binaries to speed up signing process by not signing dup files
- task: PowerShell@2
  inputs:
    targetType: filePath
    filePath: $(FORepoRoot)/build/internal/CopyUniqueBins.ps1
    arguments: '-CopySource "${{ parameters.UnsignedInput }}" -CopyDestination "$(System.DefaultWorkingDirectory)/unsigneduniquefiles" -MappingFileOut "$(System.DefaultWorkingDirectory)/mappingfile.xml"'
    failOnStderr: true
    pwsh: true
  displayName: 'Copy unique files to staging directory'

# ​​CP-230012 is for Microsoft authored binaries. Authenticode signing.
- template: EsrpSign.yml@ComplianceRepo
  parameters:
    buildOutputPath: '$(System.DefaultWorkingDirectory)/unsigneduniquefiles/'
    signOutputPath: '$(System.DefaultWorkingDirectory)/signeduniquefiles/'
    certificateId: 'CP-230012'
    pattern: '*__Microsoft.FactoryOrchestrator*.dll,*__Microsoft.FactoryOrchestrator*.exe'
    useMinimatch: false
    shouldSign: ${{ parameters.ShouldSign }}
    alwaysCopy: 'false'
    signingService: 'FactoryOrchestratorSigning'

# CP-231522​ is for 3rd party authored binaries (OSS).
- template: EsrpSign.yml@ComplianceRepo
  parameters:
    buildOutputPath: '$(System.DefaultWorkingDirectory)/unsigneduniquefiles/'
    signOutputPath: '$(System.DefaultWorkingDirectory)/signeduniquefiles/'
    certificateId: 'CP-231522'
    pattern: '*__JKang.*.dll,*__PE-Utility.dll,*__PeterKottas.*.dll,*__DasMulli.*.dll'
    useMinimatch: false
    shouldSign: ${{ parameters.ShouldSign }}
    alwaysCopy: 'false'
    signingService: 'FactoryOrchestratorSigning'

# Sign appx
# - pwsh: |
#     [string] $CertificateId = "Dynamic"
#     [string] $VariableName = "EsrpJson"
#     [string] $SigningServer = '$(SigningServer)'
#     Write-Verbose "SigningServer - $SigningServer" -Verbose
#     $esrpParameters = @(
#     @{
#         ParameterName  = "OpusName"
#         ParameterValue = "Microsoft"
#     }
#     @{
#         ParameterName  = "OpusInfo"
#         ParameterValue = "http://www.microsoft.com"
#     }
#     @{
#         ParameterName  = "FileDigest"
#         ParameterValue = "/fd sha256"
#     }
#     @{
#         ParameterName  = "TimeStamp"
#         ParameterValue = "/tr ""$SigningServer"" /td sha256"
#     }
#     )
#     $esrp = @(@{
#     keyCode = $CertificateId
#     operationSetCode = "WINMSAPP1ST"
#     parameters = $esrpParameters
#     toolName = "signtool.exe"
#     toolVersion = "6.2.9304.0"
#     })
#     $vstsCommandString = "vso[task.setvariable variable=$VariableName][$($esrp | ConvertTo-Json -Compress)]"
#     Write-Verbose -Message ("sending " + $vstsCommandString) -Verbose
#     Write-Host "##$vstsCommandString"
#     $vstsCommandString = "vso[task.setvariable variable=GDN_CODESIGN_TARGETDIRECTORY]${{ parameters.signOutputPath }}"
#     Write-Verbose -Message ("sending " + $vstsCommandString) -Verbose
#     Write-Host "##$vstsCommandString"
#   displayName: Generate msix signing JSON
#   condition: and(succeeded(), eq(variables['ESRP_TEMPLATE_SHOULD_SIGN'], 'True'))

# undo uniqify. The now signed files are copied to where they were found in ${{ parameters.UnsignedInput }}.
- task: PowerShell@2
  inputs:
    targetType: filePath
    filePath: $(FORepoRoot)/build/internal/CopyUniqueBins.ps1
    arguments: '-CopySource "$(System.DefaultWorkingDirectory)/signeduniquefiles" -MappingFileIn "$(System.DefaultWorkingDirectory)/mappingfile.xml"'
    failOnStderr: true
    pwsh: true
  displayName: 'Copy signed, unique files to UnsignedInput directory'

- pwsh: |
    # Use Windows path separator
    $dir = "${{ parameters.UnsignedInput }}".Replace('/', '\')

    # Find per arch msix
    $msix = Get-ChildItem -Path $dir -Recurse -File -Filter "*.msix"
    Write-Host "$($msix.Count) msix files found."
    if ($($msix.Count) -gt 0)
    {
      Write-Host $msix

      # copy msix to new folder
      $bundlesource = join-path "$dir" "msix"
      new-item -path $bundlesource -type Directory

      foreach ($file in $msix)
      {
        copy-item $file $bundlesource
      }

      # create msix bundle
      $bundlefolder = join-path "$dir" "msixbundle"
      new-item -path $bundlefolder -type Directory
      $bundledest = join-path $bundlefolder "Microsoft.FactoryOrchestrator.App_8wekyb3d8bbwe.msixbundle"

      . MakeAppx bundle /d "$bundlesource" /p "$bundledest"

      # verify
      if (!(Test-Path $bundledest))
      {
        Write-Error "$bundledest does not exist!"
      }
      else
      {
        "$bundledest created."
      }
    }
  displayName: 'Make unsigned msixbundle with signed msix files'

# if not signing this copies the unsigned files. if signing, this will have the signed files due to 2nd CopyUniqueBins operation.
# therefore this task always runs
- task: CopyFiles@2
  inputs:
    sourceFolder: ${{ parameters.UnsignedInput }}
    targetFolder: ${{ parameters.SignedOutput }}
  displayName: "Copy files to output folder"

- publish: '${{ parameters.SignedOutput }}'
  artifact: 'SignedBin_Windows_$(BuildConfiguration)_AllPlatforms'
  displayName: 'Publish signed binaries - Windows'
