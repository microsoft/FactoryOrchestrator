

name: $(BuildDefinitionName)_$(date:yyMM).$(date:dd)$(rev:rrr)
pool:
  name: Hosted Windows 2019 with VS2019
  demands:
  - msbuild
  - visualstudio

#Your build pipeline references the ‘BuildConfiguration’ variable, which you’ve selected to be settable at queue time. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it settable at queue time. See https://go.microsoft.com/fwlink/?linkid=865971

pr:
  branches:
    include:
    - '*'  # must quote since "*" is a YAML reserved character; we want a string
jobs:
- job: BuildFactoryOrchestrator
  steps:
    - task: NuGetToolInstaller@0
      displayName: 'Use NuGet 5.7.0'
      inputs:
        versionSpec: 5.7.0
# In the Microsoft Azure DevOps tenant, NuGetCommand is ambiguous.
# This should be `task: NuGetCommand@2`
    - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
      displayName: 'NuGet restore'
      inputs:
        command: 'restore'
        restoreSolution: '**\*.sln'
    - task: VSBuild@1
      displayName: 'Build solution **\*.sln Any CPU'
      inputs:
        platform: 'Any CPU'
        configuration: 'Debug'
    - task: VSBuild@1
      displayName: 'Build solution **\*.sln x64'
      inputs:
        platform: x64
        configuration: 'Debug'
    - task: VSBuild@1
      displayName: 'Build solution **\*.sln ARM'
      inputs:
        platform: ARM
        configuration: 'Debug'
    - task: VSBuild@1
      displayName: 'Build solution **\*.sln x86 and all arch AppXPackage'
      inputs:
        platform: x86
        configuration: 'Debug'
        msbuildArgs: '/p:AppxBundlePlatforms="x86|x64|arm" /p:AppxPackageDir="$(build.artifactStagingDirectory)\AppxPackages\\" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=Sideload'
    - task: VSTest@2
      displayName: 'Run UnitTests'
      inputs:
        testAssemblyVer2: |
          bin/Tests/**/*UnitTests.dll
          bin/Tests/**/JKang*Tests.dll
        searchFolder: '$(System.DefaultWorkingDirectory)'
        codeCoverageEnabled: true
        runInParallel: true
        vsTestVersion: latest
        runSettingsFile: '$(System.DefaultWorkingDirectory)\src\Tests\defaults.runsettings'
    - task: PythonScript@0
      inputs:
        scriptSource: inline
        script: |
          python -m pip install --upgrade pip --upgrade -r $(System.DefaultWorkingDirectory)\docs\requirements.txt
          mkdocs build --clean --config-file $(System.DefaultWorkingDirectory)\docs\mkdocs.yml
      displayName: 'Rebuild website'
    - script: |
        robocopy $(System.DefaultWorkingDirectory)\docs\site\ $(System.DefaultWorkingDirectory)\ /S
        cd $(Build.SourcesDirectory)
        git fetch
        git checkout gh-pages
        git add -A
        git diff --cached --exit-code
        echo ##vso[task.setvariable variable=hasChanges]%errorlevel%
        git diff --cached > $(Build.ArtifactStagingDirectory)\UpdatedDocs.patch
      displayName: 'Check for changes to website'
    - task: PublishPipelineArtifact@1
      displayName: 'Publish patch file as artifact if website has changes'
      condition: eq(variables['hasChanges'], '1')
      inputs:
        artifactName: UpdatedDocsPatch
        targetPath: $(Build.ArtifactStagingDirectory)
    - script: |
        ##vso[task.logissue type=warning]gh-pages documentation needs updating! Use the published UpdatedDocsPatch artifact to update the gh-pages branch after this PR is completed.
      displayName: 'Warn if docs changed'
      condition: eq(variables['hasChanges'], '1')